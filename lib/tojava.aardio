namespace tojava
{
    import console;
    import table;
    import string;
    
    //将完整类名和方法名转换为简单方法名
	function to_simpleMethod(full_method)
	{
    	var syntax1 = string.split(full_method,"<.>")
    	//console.log(table.tostring(syntax1))
    	var index = table.len(syntax1)
    	simple_name = syntax1[index]
    	return simple_name
    }
    //从三开始的奇数为实参 当出现多个参数时，取实参操作
    //todo
    function get_real_params(tokenzier_params)
    {
    	real_params = {}
    	/*for(index,name in enumerate(tokenzier_params))
    	{
        	if(index %2 == 1 and index !=1)
        	{
            	//#print(name)
            	real_params.append(name)
    		}
    	}
    	return real_params*/
    }
    //从三开始的偶数为实参 当出现多个参数时，取实参操作
    //todo
	function get_oushu_real_params(tokenzier_params)
	{
    	real_params = {}
    	/*for(index,name in enumerate(tokenzier_params))
    	{
        	if index %2 == 0 and index !=0 and index !=2:
            	#print(name)
            	real_params.append(name)
        }*/
    	return real_params
	}
	function cls()
	{
		if(params_length == 2)
		{
			class_name = function_params[1]
            return_var = function_params[2]
            syntax1 = "Class " + return_var + " = "
            syntax2 = "getClass().forName(" + class_name +")"
            java_code = syntax1 + syntax2 + ";"
		}
		if(params_length == 3)
		{
			jar = function_params[1]
            class_name = function_params[2]
            return_var = function_params[3]
            syntax1 = "Class " + return_var + " = "
            syntax2 = "getClass().forName(" + class_name +")"
            java_code = syntax1 + syntax2 + ";"
		}
		return java_code
	}
	function head_to_java(syntax_data)
	{
		function_name = syntax_data['function_name']
		function_params = syntax_data['function_params']
		params_length = syntax_data['params_length']
		if(function_name == "cls")
		{
			return cls()	
		}
		if(function_name == "syso")
		{
			param_data  = function_params[1]
        	java_code = "System.out.println(" + param_data + ");"
        	return java_code
		}
		if(function_name == "tw")
		{
			param_data = function_params[1]
        	java_code = "Toast.makeText(this," + param_data + ",Toast.LENGTH_SHORT)"+".show();"
        	return java_code
		}
		if(function_name == "uigo")
		{
			param_data = function_params[1]
        	java_code = 'startActivity(new Intent(this,'+ param_data + '));'
        	return java_code	
		}
		//sit(赋值变量, "方法","属性值")
    	//sit对应Intent类 可用方法：setAction(),setType(String type),putExtra(String,CharSequence)
		if(function_name == "sit")
		{
			return_var = function_params[1]
			prop_flag = string.trim(function_params[2],'""')
			param_data = function_params[3]
			
			pre_code = "Intent " + return_var + ' = new Intent();\n';
			if(params_length == 4)
			{
				param_data2 = function_params[4]
				//todo	
			}
			if(prop_flag == "action")
			{
				syntax_func = "setAction"
				syntax_body = return_var + "." + syntax_func + "(" + param_data + ")"
				java_code = pre_code + syntax_body
			}
			if(prop_flag == "type")
			{
				syntax_func = "setType"
				syntax_body =  return_var + "." + syntax_func + "(" + param_data + ");"	
				java_code = pre_code + syntax_body
			}
			if(prop_flag == "extra")
			{
				syntax_func = "putExtra"
            	syntax_body = return_var + "." + syntax_func + "(" + param_data + "," + param_data2 + ");"
            	java_code = pre_code + syntax_body
			}
			if(prop_flag == "classname")
			{
				syntax_func = "setClassName"
				syntax_class = "Intent"
            	syntax_var = syntax_class + " " + return_var + " = "
            	syntax_body = return_var + "." +  syntax_func + "(" + param_data + "," + param_data2 + ")"
            	java_code = syntax_var  + syntax_body+ ";"	
			}
			if(prop_flag == "flags")
			{
				//todo	
			}
			return java_code
		}
		if(function_name == "uit")
		{
			return_var = function_params[1]
			pre_code = "startActivity("
        	java_code = pre_code + return_var + ");"
        	return java_code	
		}
		if(function_name == "loadso")
		{
			param_data = function_params[1]
			java_code = 'static\n{\n System.loadLibrary(' + param_data + ');\n}'
        	return java_code
		}
		//javanew(赋值变量, 类型)
    	//javanew(赋值变量, "完整类名和方法名", "参数类型", "参数")
		if(function_name == "javanew")
		{
			//完整类名
			raw_return_var = function_params[2]

			if(params_length == 4)
			{
				param_type = function_params[3]
            	param_data = function_params[4]
            	class_name = to_simpleMethod(string.trim(raw_return_var,'""'))
            	syntax_var = class_name + " " + return_var + " = "
            	syntax_body = "new " + class_name + "(" + param_data + ")"
            	java_code = syntax_var + syntax_body + ";"
			}
			return java_code;
		}
		//javax(赋值变量, "参数", "第二个实参的类型", "方法名", "方法参数类型", "方法参数")
		if(function_name == "javax")
		{
			return_var = function_params[1]
        	param_data2 = function_params[2]
        	param_class = function_params[3]
        	param_method = function_params[4].strip('""')
        	param_type = function_params[5] //调用方法的参数类型
        	param = function_params[6]
        	java_code = return_var + " = " + param_class + "." + param_method + "(" + param + ");"
        	return java_code
		}
		if(function_params == "javags")
		{
			return_var = function_params[1]
			param1 = function_params[2]
			param_class = function_params[3]
			param_var = string.trim(function_params[4],'""')
			if(param1 != "null")
			{
				visit_type = "NotStatic"
			}
			else
			{
				visit_type = "Static"
			}			
			if(visit_type == "Static")
			{
            	syntax1 = return_var + " = "
            	syntax2 = param_class + "." + param_var + ";"
            	java_code = syntax1 + syntax2
            }
        	if(visit_type == "NotStatic")
        	{
        		 syntax1 = return_var + " = "
            	syntax2 = param1 + "." + param_var + ";"
            	java_code = syntax1 + syntax2
        	}
           	return java_code
		}
		//修改java变量值 javass(赋值变量，new出来的java对象，类，"变量名称"，"变量值")
    	if(function_name == "javass")
    	{
        	return_var = function_params[1]
        	object_name = function_params[2]
        	class_name = function_params[3]
        	param_var = string.trim(function_params[4],'""')
        	param_var_value = function_params[5]
        	syntax1 = class_name + " " + return_var + " = "
        	syntax2 = object_name + "." + param_var + " = " + tostring(param_var_value)
        	java_code = syntax1 + syntax2 + ";"
        	print(param_var_value)
        	return java_code
        }
        //fd(a,"%abc.zip")
        if(function_name == "fd")
        {
        	file = function_params[1]
        	return_var = function_params[2]
        	syntax_var = "boolean " + return_var + " = "
        	syntax_file = "File file = new File(" + file + ");" + '\n'
        	syntax_file_del = syntax_file + "file.delete();"
        	java_code = "//请把%号自行转换成绝对路径（安卓）"+ syntax_file_del
        	return java_code	
        }
        //java(赋值变量, 类, "完整类名和方法名")
    	//java(赋值变量, 类, "完整类名和方法名", "参数类型", "参数")
        if(function_name == "java")
        {
        	return_var = function_params[1]
        	class_name = function_params[2]
        	method = function_params[3]
        	if(params_length == 3)
        	{
        		simple_name = to_simpleMethod(string.trim('""'))
        		syntax1 = return_var + " = ";
        		syntax2 = class_name + "." + simple_name + "()"
        		java_code = syntax1 + syntax2 + ";" 	
        	}
        	if(params_length == 5)
        	{
        		param_type = function_params[4]
            	param_data = function_params[5]
            	if(string.trim(return_var,'""') != "null")
            	{
                	simple_name = to_simpleMethod(string.trim(method,'"'))
                	syntax_class = class_name
                	syntax_var = class_name + " " + return_var + " = " 
                	syntax_body = class_name + "." + simple_name + "(" + param_data +")"
                	java_code = syntax_var + syntax_body + ";"
                }
            	else
            	{
            		simple_name = to_simpleMethod(string.trim(method,'"'))
                	syntax = class_name + "." + simple_name + "()"
                	java_code = syntax + ";"
            	}
            	if(params_length > 5)
            	{
            		//todo 移植
            		syntax_var = class_name  + " " + return_var + " = "
            		syntax_method = class_name + "." + to_simpleMethod(string.trim(method,'""'))
            		names = get_oushu_real_params(function_params)
            		//syntax_body = "(" + ','.join(names) + ")"
            		java_code = syntax_var + syntax_method + syntax_body + ";"
        		}
        	}
        	return java_code
        }
		else 
		{
			var params = string.join(function_params,",")
			return "暂时不支持的函数,iyu分词码: "+ tostring(function_name)+" " + params + ";"
		}
		
	}
}
